# image: golang:1.23

stages:
  # - build
  - test
  # - clean

.common-test-setup: &common-test-setup
  - cat /etc/hosts # debug log to ensure postgres is up
  - cd src
  - touch .env
  - go mod download && go mod verify

unit-tests-coverage:
  stage: test
  allow_failure: false
  image: golang:1.23
  tags:
    - docker
  before_script:
    - *common-test-setup
  script:
    - mkdir -p coverage
    - make unit-tests-coverage
    - cp coverage/coverage_report.html ..
  artifacts:
    expose_as: "Test Coverage Report"
    paths:
      - coverage_report.html
    expire_in: 1 hour

unit-tests-report:
  stage: test
  when: manual
  allow_failure: false
  image: golang:1.23
  tags:
    - docker
  before_script:
    - go install github.com/vakenbolt/go-test-report@latest
    - *common-test-setup
  script:
    - make unit-tests
    - cp test_report.html ..
  artifacts:
    expose_as: "Test Overall Report"
    paths:
      - test_report.html
    expire_in: 1 hour

integration-tests:
  needs:
    - unit-tests-coverage
  stage: test
  allow_failure: false
  image: golang:1.23
  tags:
    - docker
  services:
    - name: postgres:15.4
      alias: pgdb
    # - name: golang:1.23
  variables:
    POSTGRES_DB: "${DB_NAME}"
    POSTGRES_USER: "${DB_USERNAME}"
    POSTGRES_PASSWORD: "${DB_PASSWORD}"
    DATABASE_URL: "postgres://${DB_USERNAME}:${DB_PASSWORD}@pgdb/${DB_NAME}"
  before_script:
    - *common-test-setup
    - touch internal/tests/.env # needs in tests/init_test.go
    # - make docker-up
    - go install github.com/pressly/goose/v3/cmd/goose@latest
  script:
    - make migration-up
    - make integration-tests
