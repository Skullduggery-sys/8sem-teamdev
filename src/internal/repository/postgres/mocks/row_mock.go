// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/jackc/pgx/v4.Row -o row_mock.go -n RowMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RowMock implements mm_pgx.Row
type RowMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcScan          func(dest ...interface{}) (err error)
	funcScanOrigin    string
	inspectFuncScan   func(dest ...interface{})
	afterScanCounter  uint64
	beforeScanCounter uint64
	ScanMock          mRowMockScan
}

// NewRowMock returns a mock for mm_pgx.Row
func NewRowMock(t minimock.Tester) *RowMock {
	m := &RowMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ScanMock = mRowMockScan{mock: m}
	m.ScanMock.callArgs = []*RowMockScanParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRowMockScan struct {
	optional           bool
	mock               *RowMock
	defaultExpectation *RowMockScanExpectation
	expectations       []*RowMockScanExpectation

	callArgs []*RowMockScanParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RowMockScanExpectation specifies expectation struct of the Row.Scan
type RowMockScanExpectation struct {
	mock               *RowMock
	params             *RowMockScanParams
	paramPtrs          *RowMockScanParamPtrs
	expectationOrigins RowMockScanExpectationOrigins
	results            *RowMockScanResults
	returnOrigin       string
	Counter            uint64
}

// RowMockScanParams contains parameters of the Row.Scan
type RowMockScanParams struct {
	dest []interface{}
}

// RowMockScanParamPtrs contains pointers to parameters of the Row.Scan
type RowMockScanParamPtrs struct {
	dest *[]interface{}
}

// RowMockScanResults contains results of the Row.Scan
type RowMockScanResults struct {
	err error
}

// RowMockScanOrigins contains origins of expectations of the Row.Scan
type RowMockScanExpectationOrigins struct {
	origin     string
	originDest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmScan *mRowMockScan) Optional() *mRowMockScan {
	mmScan.optional = true
	return mmScan
}

// Expect sets up expected params for Row.Scan
func (mmScan *mRowMockScan) Expect(dest ...interface{}) *mRowMockScan {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &RowMockScanExpectation{}
	}

	if mmScan.defaultExpectation.paramPtrs != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by ExpectParams functions")
	}

	mmScan.defaultExpectation.params = &RowMockScanParams{dest}
	mmScan.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmScan.expectations {
		if minimock.Equal(e.params, mmScan.defaultExpectation.params) {
			mmScan.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmScan.defaultExpectation.params)
		}
	}

	return mmScan
}

// ExpectDestParam1 sets up expected param dest for Row.Scan
func (mmScan *mRowMockScan) ExpectDestParam1(dest ...interface{}) *mRowMockScan {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &RowMockScanExpectation{}
	}

	if mmScan.defaultExpectation.params != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by Expect")
	}

	if mmScan.defaultExpectation.paramPtrs == nil {
		mmScan.defaultExpectation.paramPtrs = &RowMockScanParamPtrs{}
	}
	mmScan.defaultExpectation.paramPtrs.dest = &dest
	mmScan.defaultExpectation.expectationOrigins.originDest = minimock.CallerInfo(1)

	return mmScan
}

// Inspect accepts an inspector function that has same arguments as the Row.Scan
func (mmScan *mRowMockScan) Inspect(f func(dest ...interface{})) *mRowMockScan {
	if mmScan.mock.inspectFuncScan != nil {
		mmScan.mock.t.Fatalf("Inspect function is already set for RowMock.Scan")
	}

	mmScan.mock.inspectFuncScan = f

	return mmScan
}

// Return sets up results that will be returned by Row.Scan
func (mmScan *mRowMockScan) Return(err error) *RowMock {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by Set")
	}

	if mmScan.defaultExpectation == nil {
		mmScan.defaultExpectation = &RowMockScanExpectation{mock: mmScan.mock}
	}
	mmScan.defaultExpectation.results = &RowMockScanResults{err}
	mmScan.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmScan.mock
}

// Set uses given function f to mock the Row.Scan method
func (mmScan *mRowMockScan) Set(f func(dest ...interface{}) (err error)) *RowMock {
	if mmScan.defaultExpectation != nil {
		mmScan.mock.t.Fatalf("Default expectation is already set for the Row.Scan method")
	}

	if len(mmScan.expectations) > 0 {
		mmScan.mock.t.Fatalf("Some expectations are already set for the Row.Scan method")
	}

	mmScan.mock.funcScan = f
	mmScan.mock.funcScanOrigin = minimock.CallerInfo(1)
	return mmScan.mock
}

// When sets expectation for the Row.Scan which will trigger the result defined by the following
// Then helper
func (mmScan *mRowMockScan) When(dest ...interface{}) *RowMockScanExpectation {
	if mmScan.mock.funcScan != nil {
		mmScan.mock.t.Fatalf("RowMock.Scan mock is already set by Set")
	}

	expectation := &RowMockScanExpectation{
		mock:               mmScan.mock,
		params:             &RowMockScanParams{dest},
		expectationOrigins: RowMockScanExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmScan.expectations = append(mmScan.expectations, expectation)
	return expectation
}

// Then sets up Row.Scan return parameters for the expectation previously defined by the When method
func (e *RowMockScanExpectation) Then(err error) *RowMock {
	e.results = &RowMockScanResults{err}
	return e.mock
}

// Times sets number of times Row.Scan should be invoked
func (mmScan *mRowMockScan) Times(n uint64) *mRowMockScan {
	if n == 0 {
		mmScan.mock.t.Fatalf("Times of RowMock.Scan mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmScan.expectedInvocations, n)
	mmScan.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmScan
}

func (mmScan *mRowMockScan) invocationsDone() bool {
	if len(mmScan.expectations) == 0 && mmScan.defaultExpectation == nil && mmScan.mock.funcScan == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmScan.mock.afterScanCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmScan.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Scan implements mm_pgx.Row
func (mmScan *RowMock) Scan(dest ...interface{}) (err error) {
	mm_atomic.AddUint64(&mmScan.beforeScanCounter, 1)
	defer mm_atomic.AddUint64(&mmScan.afterScanCounter, 1)

	mmScan.t.Helper()

	if mmScan.inspectFuncScan != nil {
		mmScan.inspectFuncScan(dest...)
	}

	mm_params := RowMockScanParams{dest}

	// Record call args
	mmScan.ScanMock.mutex.Lock()
	mmScan.ScanMock.callArgs = append(mmScan.ScanMock.callArgs, &mm_params)
	mmScan.ScanMock.mutex.Unlock()

	for _, e := range mmScan.ScanMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmScan.ScanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmScan.ScanMock.defaultExpectation.Counter, 1)
		mm_want := mmScan.ScanMock.defaultExpectation.params
		mm_want_ptrs := mmScan.ScanMock.defaultExpectation.paramPtrs

		mm_got := RowMockScanParams{dest}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.dest != nil && !minimock.Equal(*mm_want_ptrs.dest, mm_got.dest) {
				mmScan.t.Errorf("RowMock.Scan got unexpected parameter dest, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmScan.ScanMock.defaultExpectation.expectationOrigins.originDest, *mm_want_ptrs.dest, mm_got.dest, minimock.Diff(*mm_want_ptrs.dest, mm_got.dest))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmScan.t.Errorf("RowMock.Scan got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmScan.ScanMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmScan.ScanMock.defaultExpectation.results
		if mm_results == nil {
			mmScan.t.Fatal("No results are set for the RowMock.Scan")
		}
		return (*mm_results).err
	}
	if mmScan.funcScan != nil {
		return mmScan.funcScan(dest...)
	}
	mmScan.t.Fatalf("Unexpected call to RowMock.Scan. %v", dest)
	return
}

// ScanAfterCounter returns a count of finished RowMock.Scan invocations
func (mmScan *RowMock) ScanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.afterScanCounter)
}

// ScanBeforeCounter returns a count of RowMock.Scan invocations
func (mmScan *RowMock) ScanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmScan.beforeScanCounter)
}

// Calls returns a list of arguments used in each call to RowMock.Scan.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmScan *mRowMockScan) Calls() []*RowMockScanParams {
	mmScan.mutex.RLock()

	argCopy := make([]*RowMockScanParams, len(mmScan.callArgs))
	copy(argCopy, mmScan.callArgs)

	mmScan.mutex.RUnlock()

	return argCopy
}

// MinimockScanDone returns true if the count of the Scan invocations corresponds
// the number of defined expectations
func (m *RowMock) MinimockScanDone() bool {
	if m.ScanMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ScanMock.invocationsDone()
}

// MinimockScanInspect logs each unmet expectation
func (m *RowMock) MinimockScanInspect() {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RowMock.Scan at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterScanCounter := mm_atomic.LoadUint64(&m.afterScanCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && afterScanCounter < 1 {
		if m.ScanMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RowMock.Scan at\n%s", m.ScanMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RowMock.Scan at\n%s with params: %#v", m.ScanMock.defaultExpectation.expectationOrigins.origin, *m.ScanMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && afterScanCounter < 1 {
		m.t.Errorf("Expected call to RowMock.Scan at\n%s", m.funcScanOrigin)
	}

	if !m.ScanMock.invocationsDone() && afterScanCounter > 0 {
		m.t.Errorf("Expected %d calls to RowMock.Scan at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ScanMock.expectedInvocations), m.ScanMock.expectedInvocationsOrigin, afterScanCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RowMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockScanInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RowMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RowMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockScanDone()
}
