import asyncio
import re
import logging
import os
import json
from datetime import datetime
from typing import Optional, Any, Dict, List

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# –ê–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ –ø–æ—Ä—Ç—É 9000
API_URL = "http://127.0.0.1:9000/api/v2"
# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    root_name = State()
    new_list_name = State()
    rename_list = State()
    confirm_delete = State()
    add_poster = State()

class APIError(Exception):
    def __init__(self, status: int, message: str):
        super().__init__(f"{status}:{message}")
        self.status = status
        self.message = message

class APIClient:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session: Optional[aiohttp.ClientSession] = None

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc, tb):
        if self.session:
            await self.session.close()

    async def _request(self, method: str, path: str, token: str, **kwargs: Any) -> Any:
        url = f"{self.base_url}{path}"
        headers = {"X-User-Token": token}
        logger.debug(f"> {method} {url}")
        if 'json' in kwargs:
            logger.debug(f"Payload: {kwargs['json']}")
        async with self.session.request(method, url, headers=headers, **kwargs) as resp:
            text = await resp.text()
            logger.debug(f"< {resp.status} {url}")
            if resp.status >= 400:
                raise APIError(resp.status, text)
            try:
                return json.loads(text)
            except json.JSONDecodeError:
                return text

    # API –º–µ—Ç–æ–¥—ã
    async def signup(self, token: str) -> int:
        return await self._request('POST', '/sign-up', token, json={})
    async def get_root_list(self, token: str) -> Dict[str, Any]:
        return await self._request('GET', '/lists-root', token)
    async def get_list(self, token: str, list_id: int) -> Dict[str, Any]:
        return await self._request('GET', f'/lists/{list_id}', token)
    async def create_list(self, token: str, name: str, parent_id: Optional[int]) -> Dict[str, Any]:
        payload = {'name': name}
        if parent_id is not None:
            payload['parentId'] = parent_id
        return await self._request('POST', '/lists', token, json=payload)
    async def update_list(self, token: str, list_id: int, new_name: str) -> Any:
        return await self._request('PUT', f'/lists/{list_id}', token, json={'name': new_name})
    async def delete_list(self, token: str, list_id: int) -> Any:
        return await self._request('DELETE', f'/lists/{list_id}', token)
    async def get_sublists(self, token: str, parent_id: int) -> List[Dict[str, Any]]:
        return await self._request('GET', f'/sublists/{parent_id}', token)
    async def get_list_posters(self, token: str, list_id: int) -> List[Dict[str, Any]]:
        return await self._request('GET', f'/lists/{list_id}/posters', token)
    async def get_poster(self, token: str, poster_id: int) -> Dict[str, Any]:
        return await self._request('GET', f'/posters/{poster_id}', token)
    async def create_poster_kp(self, token: str, kp_id: str) -> Dict[str, Any]:
        return await self._request('POST', '/posters/kp', token, json={'kp_id': kp_id})
    async def add_poster_to_list(self, token: str, list_id: int, poster_id: int) -> Any:
        return await self._request('POST', f'/lists/{list_id}/posters/{poster_id}', token)
    async def delete_poster_from_list(self, token: str, list_id: int, poster_id: int) -> Any:
        return await self._request('DELETE', f'/lists/{list_id}/posters/{poster_id}', token)
    async def create_poster_record(self, token: str, poster_id: int) -> Dict[str, Any]:
        return await self._request('POST', f'/poster-records/{poster_id}', token)
    async def list_poster_records(self, token: str) -> List[Dict[str, Any]]:
        return await self._request('GET', '/poster-records', token)
    async def delete_poster_record(self, token: str, poster_id: int) -> Any:
        return await self._request('DELETE', f'/poster-records/{poster_id}', token)

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    @dp.message(CommandStart())
    async def on_start(message: Message, state: FSMContext):
        user_token = str(message.from_user.id)
        new_user = False
        # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∞—Ç—å —é–∑–µ—Ä–∞
        async with APIClient(API_URL) as api:
            try:
                await api.signup(user_token)
                new_user = True
            except APIError:
                pass

        if new_user:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç, –∫–∏–Ω–æ–º–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FilmOlistBot! üçø\n"
                "–ó–¥–µ—Å—å —Ç—ã —Å–æ–∑–¥–∞—ë—à—å —Å–ø–∏—Å–∫–∏ —Ñ–∏–ª—å–º–æ–≤, –¥–æ–±–∞–≤–ª—è–µ—à—å –∫–∏–Ω–æ –∏ –æ—Ç–º–µ—á–∞–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ. üé¨\n"
                "–ü–æ–µ—Ö–∞–ª–∏ ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–∂–µ –≥–æ—Ç–æ–≤! üí°"
            )
            async with APIClient(API_URL) as api:
                resp = await api.create_list(user_token, "–ì–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫", None)
                root_id = resp['id']
            await show_list(message, root_id, user_token)
            return

        try:
            async with APIClient(API_URL) as api:
                root = await api.get_root_list(user_token)
        except APIError as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")
            return

        await show_list(message, root['id'], user_token)

    @dp.message(Form.root_name)
    async def process_root_name(message: Message, state: FSMContext):
        token = str(message.from_user.id)
        name = message.text.strip()
        async with APIClient(API_URL) as api:
            resp = await api.create_list(token, name, None)
        await state.clear()
        await show_list(message, resp['id'], token)

    async def show_list(event: Message | CallbackQuery, list_id: int, token: str):
        async with APIClient(API_URL) as api:
            info = await api.get_list(token, list_id)
            name = info.get('name', '')
            parent_id = info.get('parentId')
            root = await api.get_root_list(token)
            root_id = root['id']
            sublists = await api.get_sublists(token, list_id)
            try:
                posters_raw = await api.get_list_posters(token, list_id)
            except APIError:
                posters_raw = []
            posters: List[Dict[str, Any]] = []
            for p in posters_raw:
                pid = p['posterId']
                try:
                    poster = await api.get_poster(token, pid)
                except APIError:
                    poster = {}
                posters.append({
                    'id': pid,
                    'name': poster.get('name', 'Unknown')
                })
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        rows: List[List[InlineKeyboardButton]] = []
        if not sublists and not posters:
            text = f"üé¨ –°–ø–∏—Å–æ–∫ '{name}' –ø—É—Å—Ç!"
            rows.append([
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", callback_data=f"add_poster_{list_id}"),
                InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø–æ–¥—Å–ø–∏—Å–æ–∫", callback_data=f"new_sub_{list_id}")
            ])
            if list_id != root_id:
                rows.append([
                    InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{list_id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{list_id}")
                ])
            else:
                rows.append([
                    InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{list_id}"),
                ])
        else:
            text = f"üìÇ {name}"
            for sub in sublists:
                rows.append([InlineKeyboardButton(text=f"üìÅ {sub['name']}", callback_data=f"list_{sub['id']}" )])
            for p in posters:
                rows.append([InlineKeyboardButton(text=f"üé• {p['name']}", callback_data=f"poster_{list_id}_{p['id']}" )])
            rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", callback_data=f"add_poster_{list_id}")])
            if list_id != root_id:
                rows.append([
                    InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø–æ–¥—Å–ø–∏—Å–æ–∫", callback_data=f"new_sub_{list_id}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{list_id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{list_id}")
                ])
            else:
                rows.append([
                    InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø–æ–¥—Å–ø–∏—Å–æ–∫", callback_data=f"new_sub_{list_id}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{list_id}")
                ])
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è
        nav_row: List[InlineKeyboardButton] = []
        if list_id != root_id:
            nav_row.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{list_id}")
            )
            nav_row.append(
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω—ã–π", callback_data="home")
            )
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        rows.append([
            InlineKeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
        ])
        rows.append(nav_row)
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        if isinstance(event, Message):
            await event.answer(text, reply_markup=kb)
        else:
            try:
                await event.message.edit_text(text, reply_markup=kb)
            except TelegramBadRequest:
                await event.message.answer(text, reply_markup=kb)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–ø–∏—Å–∫–∞
    @dp.callback_query(F.data.startswith('new_sub_'))
    async def ask_new_sub(callback: CallbackQuery, state: FSMContext):
        parent_id = int(callback.data.split('_')[-1])
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
        await state.update_data(parent_id=parent_id)
        await state.set_state(Form.new_list_name)

    @dp.message(Form.new_list_name)
    async def process_new_sub(message: Message, state: FSMContext):
        data = await state.get_data()
        parent_id = data.get('parent_id')
        name = message.text.strip()
        token = str(message.from_user.id)
        async with APIClient(API_URL) as api:
            resp = await api.create_list(token, name, parent_id)
        await state.clear()
        await show_list(message, resp['id'], token)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    @dp.callback_query(F.data.startswith('rename_'))
    async def ask_rename(callback: CallbackQuery, state: FSMContext):
        list_id = int(callback.data.split('_')[-1])
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:")
        await state.update_data(list_id=list_id)
        await state.set_state(Form.rename_list)

    @dp.message(Form.rename_list)
    async def process_rename(message: Message, state: FSMContext):
        data = await state.get_data()
        list_id = data.get('list_id')
        new_name = message.text.strip()
        token = str(message.from_user.id)
        async with APIClient(API_URL) as api:
            await api.update_list(token, list_id, new_name)
        await state.clear()
        await show_list(message, list_id, token)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    @dp.callback_query(F.data.startswith('delete_'))
    async def ask_delete(callback: CallbackQuery, state: FSMContext):
        list_id = int(callback.data.split('_')[-1])
        await callback.answer()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_yes_{list_id}"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_no_{list_id}")]
        ])
        await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫?", reply_markup=kb)
        await state.update_data(list_id=list_id)
        await state.set_state(Form.confirm_delete)

    @dp.callback_query(F.data.startswith('confirm_yes_'))
    async def process_confirm_yes(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        list_id = data.get('list_id')
        token = str(callback.from_user.id)
        async with APIClient(API_URL) as api:
            current = await api.get_list(token, list_id)
            parent_id = current.get('parentId')
            await api.delete_list(token, list_id)
            await callback.answer("–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω.")
            if parent_id:
                await show_list(callback, parent_id, token)
            else:
                root = await api.get_root_list(token)
                await show_list(callback, root['id'], token)
        await state.clear()

    @dp.callback_query(F.data.startswith('confirm_no_'))
    async def process_confirm_no(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        list_id = data.get('list_id')
        token = str(callback.from_user.id)
        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await show_list(callback, list_id, token)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ KP ID –∏–ª–∏ URL
    @dp.callback_query(F.data.startswith('add_poster_'))
    async def ask_add_poster(callback: CallbackQuery, state: FSMContext):
        list_id = int(callback.data.split('_')[-1])
        await callback.answer()
        await callback.message.answer("–ú—ã –¥–æ–±–∞–≤–∏–º —Ñ–∏–ª—å–º —Å—Ä–∞–∑—É –ø–æ ID –∏–ª–∏ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404900 –∏–ª–∏ https://www.kinopoisk.ru/film/404900/):")
        await state.update_data(list_id=list_id)
        await state.set_state(Form.add_poster)

    @dp.message(Form.add_poster)
    async def process_add_poster(message: Message, state: FSMContext):
        data = await state.get_data()
        list_id = data.get('list_id')
        text = message.text.strip()

        match_id = re.fullmatch(r'\d+', text)

        match_url = re.fullmatch(
            r'https?://(?:www\.)?kinopoisk\.ru/film/(\d+)/?$', text
        )
        if match_id:
            kp_id = match_id.group(0)
        elif match_url:
            kp_id = match_url.group(1)
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404900) –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É "
                "https://www.kinopoisk.ru/film/404900/"
            )
            return 

        user_token = str(message.from_user.id)
        try:
            async with APIClient(API_URL) as api:
                created = await api.create_poster_kp(user_token, kp_id)
                poster_id = created.get('id')
                await api.add_poster_to_list(user_token, list_id, poster_id)
        except APIError as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e.message}")
            await state.clear()
            return

        await message.answer("üéâ –§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await state.clear()
        await show_list(message, list_id, user_token)

    # –≠–∫—Ä–∞–Ω –ø–æ—Å—Ç–µ—Ä–∞
    @dp.callback_query(F.data.startswith('poster_'))
    async def show_poster_actions(callback: CallbackQuery):
        _, list_str, poster_str = callback.data.split('_')
        list_id, poster_id = int(list_str), int(poster_str)
        token = str(callback.from_user.id)
        async with APIClient(API_URL) as api:
            try:
                info = await api.get_poster(token, poster_id)
            except APIError:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ—Ä–∞.")
                return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        created = info.get('createdat', '')
        try:
            date = datetime.fromisoformat(created)
            created_fmt = date.strftime('%d.%m.%Y')
        except Exception:
            created_fmt = created
        caption = (
            f"üé¨ {info['name']} ({info['year']})\n"
            f"‚è±Ô∏è –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: {info.get('chrono', '?')} –º–∏–Ω\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {created_fmt}\n"
            f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(info.get('genres', []))}\n"
            f"üîó https://www.kinopoisk.ru/film/{info.get('kp_id')}/"
        )
        rows = [
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_p_{list_id}_{poster_id}"),
             InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"record_{list_id}_{poster_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{list_id}"),
             InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="home")]
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await callback.answer()
        image_url = info.get('image_url')
        try:
            if image_url:
                media = InputMediaPhoto(media=image_url, caption=caption)
                await callback.message.edit_media(media=media, reply_markup=kb)
            else:
                raise Exception
        except (TelegramBadRequest, Exception):
            try:
                await callback.message.edit_text(caption, reply_markup=kb)
            except TelegramBadRequest:
                await callback.message.answer(caption, reply_markup=kb)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    @dp.callback_query(F.data.startswith('del_p_'))
    async def process_delete_poster(callback: CallbackQuery):
        parts = callback.data.split('_')
        list_id = int(parts[-2])
        poster_id = int(parts[-1])
        token = str(callback.from_user.id)
        async with APIClient(API_URL) as api:
            await api.delete_poster_from_list(token, list_id, poster_id)
        await callback.answer("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω.")
        await show_list(callback, list_id, token)

    # –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
    @dp.callback_query(F.data.startswith('record_'))
    async def process_record(callback: CallbackQuery):
        _, list_id_str, poster_id_str = callback.data.split('_', 2)
        list_id, poster_id = int(list_id_str), int(poster_id_str)
        token = str(callback.from_user.id)
        async with APIClient(API_URL) as api:
            await api.create_poster_record(token, poster_id)
            await api.delete_poster_from_list(token, list_id, poster_id)
        await callback.answer("‚úÖ –§–∏–ª—å–º –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        await show_list(callback, list_id, token)

    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    @dp.callback_query(F.data == 'history')
    async def show_history(callback: CallbackQuery):
        token = str(callback.from_user.id)
        try:
            async with APIClient(API_URL) as api:
                records = await api.list_poster_records(token)
            rows: List[List[InlineKeyboardButton]] = []
            text = "üìñ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:" if records else "üìñ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
            for r in records:
                pid = r.get('posterId')
                async with APIClient(API_URL) as api:
                    try:
                        info = await api.get_poster(token, pid)
                        name = info.get('name', 'Unknown')
                    except APIError:
                        name = 'Unknown'
                rows.append([
                    InlineKeyboardButton(text=f"üé• {name}", callback_data=f"hist_{pid}")
                ])
            rows.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")
            ])
            await callback.answer()
            kb = InlineKeyboardMarkup(inline_keyboard=rows)
            try:
                await callback.message.edit_text(text, reply_markup=kb)
            except TelegramBadRequest:
                await callback.message.answer(text, reply_markup=kb)
        except APIError:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–∞. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º?)")

    @dp.callback_query(F.data.startswith('hist_'))
    async def show_history_item(callback: CallbackQuery):
        poster_id = int(callback.data.split('_')[1])
        token = str(callback.from_user.id)
        async with APIClient(API_URL) as api:
            try:
                info = await api.get_poster(token, poster_id)
            except APIError:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ—Ä–∞.")
                return
        created = info.get('createdat', '')
        try:
            date = datetime.fromisoformat(created)
            created_fmt = date.strftime('%d.%m.%Y')
        except Exception:
            created_fmt = created
        caption = (
            f"üé¨ {info['name']} ({info['year']})\n"
            f"‚è±Ô∏è –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: {info.get('chrono', '?')} –º–∏–Ω\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {created_fmt}\n"
            f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(info.get('genres', []))}\n"
            f"üîó https://www.kinopoisk.ru/film/{info.get('kp_id')}/"
        )
        rows = [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="history"),
             InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="home")]
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await callback.answer()
        image_url = info.get('image_url')
        try:
            if image_url:
                media = InputMediaPhoto(media=image_url, caption=caption)
                await callback.message.edit_media(media=media, reply_markup=kb)
            else:
                raise Exception
        except (TelegramBadRequest, Exception):
            try:
                await callback.message.edit_text(caption, reply_markup=kb)
            except TelegramBadRequest:
                await callback.message.answer(caption, reply_markup=kb)

    # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å–ø–∏—Å–∫–∞–º
    @dp.callback_query(F.data.startswith('list_'))
    async def on_list(callback: CallbackQuery):
        list_id = int(callback.data.split('_')[1])
        token = str(callback.from_user.id)
        await callback.answer()
        await show_list(callback, list_id, token)

    # –ù–∞–∑–∞–¥ –∏ –ì–ª–∞–≤–Ω–æ–µ
    @dp.callback_query(F.data.startswith('back_'))
    async def on_back(callback: CallbackQuery):
        current_id = int(callback.data.split('_')[1])
        token = str(callback.from_user.id)
        await callback.answer()
        async with APIClient(API_URL) as api:
            current = await api.get_list(token, current_id)
            parent_id = current.get('parentId')
            if parent_id:
                await show_list(callback, parent_id, token)
            else:
                root = await api.get_root_list(token)
                await show_list(callback, root['id'], token)

    @dp.callback_query(F.data == 'home')
    async def on_home(callback: CallbackQuery):
        token = str(callback.from_user.id)
        await callback.answer()
        async with APIClient(API_URL) as api:
            root = await api.get_root_list(token)
        await show_list(callback, root['id'], token)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
